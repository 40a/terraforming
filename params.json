{"name":"Terraforming","tagline":"Import existing AWS resources into Terraform style (tf, tfstate)","body":"# Terraforming\r\n\r\n[![Build Status](https://travis-ci.org/dtan4/terraforming.svg?branch=master)](https://travis-ci.org/dtan4/terraforming)\r\n[![Code Climate](https://codeclimate.com/github/dtan4/terraforming/badges/gpa.svg)](https://codeclimate.com/github/dtan4/terraforming)\r\n[![Test Coverage](https://codeclimate.com/github/dtan4/terraforming/badges/coverage.svg)](https://codeclimate.com/github/dtan4/terraforming)\r\n[![Dependency Status](https://gemnasium.com/dtan4/terraforming.svg)](https://gemnasium.com/dtan4/terraforming)\r\n[![Gem Version](https://badge.fury.io/rb/terraforming.svg)](http://badge.fury.io/rb/terraforming)\r\n[![MIT License](http://img.shields.io/badge/license-MIT-blue.svg?style=flat)](LICENSE)\r\n[![Docker Repository on Quay.io](https://quay.io/repository/dtan4/terraforming/status \"Docker Repository on Quay.io\")](https://quay.io/repository/dtan4/terraforming)\r\n\r\nExport existing AWS resources to [Terraform](https://terraform.io/) style (tf, tfstate)\r\n\r\n## Installation\r\n\r\nAdd this line to your application's Gemfile:\r\n\r\n```ruby\r\ngem 'terraforming'\r\n```\r\n\r\nAnd then execute:\r\n\r\n    $ bundle\r\n\r\nOr install it yourself as:\r\n\r\n    $ gem install terraforming\r\n\r\n## Prerequisites\r\n\r\nYou need to set AWS credentials.\r\n\r\n```bash\r\nexport AWS_ACCESS_KEY_ID=XXXXXXXXXXXXXXXXXXXX\r\nexport AWS_SECRET_ACCESS_KEY=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\r\nexport AWS_DEFAULT_REGION=xx-yyyy-0 \\\r\n```\r\n\r\n## Usage\r\n\r\n```bash\r\n$ terraforming\r\nCommands:\r\n  terraforming dbpg            # Database Parameter Group\r\n  terraforming dbsg            # Database Security Group\r\n  terraforming dbsn            # Database Subnet Group\r\n  terraforming ec2             # EC2\r\n  terraforming elb             # ELB\r\n  terraforming iamg            # IAM Group\r\n  terraforming iamgp           # IAM Group Policy\r\n  terraforming iamip           # IAM Instance Profile\r\n  terraforming iamp            # IAM Policy\r\n  terraforming iamr            # IAM Role\r\n  terraforming iamrp           # IAM Role Policy\r\n  terraforming iamu            # IAM User\r\n  terraforming iamup           # IAM User Policy\r\n  terraforming nacl            # Network ACL\r\n  terraforming r53r            # Route53 Record\r\n  terraforming r53z            # Route53 Hosted Zone\r\n  terraforming rds             # RDS\r\n  terraforming s3              # S3\r\n  terraforming sg              # Security Group\r\n  terraforming sn              # Subnet\r\n  terraforming vpc             # VPC\r\n```\r\n\r\n### Export tf\r\n\r\n(e.g. S3 buckets):\r\n\r\n```bash\r\n$ terraforming s3\r\n```\r\n\r\n```go\r\nresource \"aws_s3_bucket\" \"hoge\" {\r\n    bucket = \"hoge\"\r\n    acl    = \"private\"\r\n}\r\n\r\nresource \"aws_s3_bucket\" \"fuga\" {\r\n    bucket = \"fuga\"\r\n    acl    = \"private\"\r\n}\r\n```\r\n\r\n### Export tfstate\r\n\r\nSpecify `--tfstate` option (e.g. S3 buckets):\r\n\r\n```bash\r\n$ terraforming s3 --tfstate\r\n```\r\n\r\n```json\r\n{\r\n  \"version\": 1,\r\n  \"serial\": 1,\r\n  \"modules\": {\r\n    \"path\": [\r\n      \"root\"\r\n    ],\r\n    \"outputs\": {\r\n    },\r\n    \"resources\": {\r\n      \"aws_s3_bucket.hoge\": {\r\n        \"type\": \"aws_s3_bucket\",\r\n        \"primary\": {\r\n          \"id\": \"hoge\",\r\n          \"attributes\": {\r\n            \"acl\": \"private\",\r\n            \"bucket\": \"hoge\",\r\n            \"id\": \"hoge\"\r\n          }\r\n        }\r\n      },\r\n      \"aws_s3_bucket.fuga\": {\r\n        \"type\": \"aws_s3_bucket\",\r\n        \"primary\": {\r\n          \"id\": \"fuga\",\r\n          \"attributes\": {\r\n            \"acl\": \"private\",\r\n            \"bucket\": \"fuga\",\r\n            \"id\": \"fuga\"\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nIf you want to merge exported tfstate to existing `terraform.tfstate`, specify `--tfstate --merge=/path/to/terraform.tfstate` option (e.g. S3 buckets):\r\n\r\nExisting `terraform.tfstate`:\r\n\r\n```bash\r\n# /path/to/terraform.tfstate\r\n\r\n{\r\n  \"version\": 1,\r\n  \"serial\": 88,\r\n  \"remote\": {\r\n    \"type\": \"s3\",\r\n    \"config\": {\r\n      \"bucket\": \"terraforming-tfstate\",\r\n      \"key\": \"tf\"\r\n    }\r\n  },\r\n  \"modules\": {\r\n    \"path\": [\r\n      \"root\"\r\n    ],\r\n    \"outputs\": {\r\n    },\r\n    \"resources\": {\r\n      \"aws_elb.hogehoge\": {\r\n        \"type\": \"aws_elb\",\r\n        \"primary\": {\r\n          \"id\": \"hogehoge\",\r\n          \"attributes\": {\r\n            \"availability_zones.#\": \"2\",\r\n            \"connection_draining\": \"true\",\r\n            \"connection_draining_timeout\": \"300\",\r\n            \"cross_zone_load_balancing\": \"true\",\r\n            \"dns_name\": \"hoge-12345678.ap-northeast-1.elb.amazonaws.com\",\r\n            \"health_check.#\": \"1\",\r\n            \"id\": \"hogehoge\",\r\n            \"idle_timeout\": \"60\",\r\n            \"instances.#\": \"1\",\r\n            \"listener.#\": \"1\",\r\n            \"name\": \"hoge\",\r\n            \"security_groups.#\": \"2\",\r\n            \"source_security_group\": \"default\",\r\n            \"subnets.#\": \"2\"\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nTo generate merged tfstate:\r\n\r\n```bash\r\n$ terraforming s3 --tfstate --merge=/path/to/tfstate\r\n```\r\n\r\n```json\r\n{\r\n  \"version\": 1,\r\n  \"serial\": 89,\r\n  \"remote\": {\r\n    \"type\": \"s3\",\r\n    \"config\": {\r\n      \"bucket\": \"terraforming-tfstate\",\r\n      \"key\": \"tf\"\r\n    }\r\n  },\r\n  \"modules\": {\r\n    \"path\": [\r\n      \"root\"\r\n    ],\r\n    \"outputs\": {\r\n    },\r\n    \"resources\": {\r\n      \"aws_elb.hogehoge\": {\r\n        \"type\": \"aws_elb\",\r\n        \"primary\": {\r\n          \"id\": \"hogehoge\",\r\n          \"attributes\": {\r\n            \"availability_zones.#\": \"2\",\r\n            \"connection_draining\": \"true\",\r\n            \"connection_draining_timeout\": \"300\",\r\n            \"cross_zone_load_balancing\": \"true\",\r\n            \"dns_name\": \"hoge-12345678.ap-northeast-1.elb.amazonaws.com\",\r\n            \"health_check.#\": \"1\",\r\n            \"id\": \"hogehoge\",\r\n            \"idle_timeout\": \"60\",\r\n            \"instances.#\": \"1\",\r\n            \"listener.#\": \"1\",\r\n            \"name\": \"hoge\",\r\n            \"security_groups.#\": \"2\",\r\n            \"source_security_group\": \"default\",\r\n            \"subnets.#\": \"2\"\r\n          }\r\n        }\r\n      },\r\n      \"aws_s3_bucket.hoge\": {\r\n        \"type\": \"aws_s3_bucket\",\r\n        \"primary\": {\r\n          \"id\": \"hoge\",\r\n          \"attributes\": {\r\n            \"acl\": \"private\",\r\n            \"bucket\": \"hoge\",\r\n            \"id\": \"hoge\"\r\n          }\r\n        }\r\n      },\r\n      \"aws_s3_bucket.fuga\": {\r\n        \"type\": \"aws_s3_bucket\",\r\n        \"primary\": {\r\n          \"id\": \"fuga\",\r\n          \"attributes\": {\r\n            \"acl\": \"private\",\r\n            \"bucket\": \"fuga\",\r\n            \"id\": \"fuga\"\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nAfter writing exported tf and tfstate to files, execute `terraform plan` and check the result.\r\nThere should be no diff.\r\n\r\n```bash\r\n$ terraform plan\r\nNo changes. Infrastructure is up-to-date. This means that Terraform\r\ncould not detect any differences between your configuration and\r\nthe real physical resources that exist. As a result, Terraform\r\ndoesn't need to do anything.\r\n```\r\n\r\n## Run as Docker container [![Docker Repository on Quay.io](https://quay.io/repository/dtan4/terraforming/status \"Docker Repository on Quay.io\")](https://quay.io/repository/dtan4/terraforming)\r\n\r\nTerraforming Docker Image is available at [quay.io/dtan4/terraforming](https://quay.io/repository/dtan4/terraforming) and developed at [dtan4/dockerfile-terraforming](https://github.com/dtan4/dockerfile-terraforming).\r\n\r\nPull the Docker image:\r\n\r\n```bash\r\n$ docker pull quay.io/dtan4/terraforming:latest\r\n```\r\n\r\nAnd then run Terraforming as a Docker container:\r\n\r\n```bash\r\n$ docker run \\\r\n    --rm \\\r\n    --name terraforming \\\r\n    -e AWS_ACCESS_KEY_ID=XXXXXXXXXXXXXXXXXXXX \\\r\n    -e AWS_SECRET_ACCESS_KEY=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx \\\r\n    -e AWS_DEFAULT_REGION=xx-yyyy-0 \\\r\n    quay.io/dtan4/terraforming:latest \\\r\n    terraforming s3\r\n```\r\n\r\n## Development\r\n\r\nAfter checking out the repo, run `script/setup` to install dependencies. Then, run `script/console` for an interactive prompt that will allow you to experiment.\r\n\r\nTo install this gem onto your local machine, run `bundle exec rake install`. To release a new version, update the version number in `version.rb`, and then run `bundle exec rake release` to create a git tag for the version, push git commits and tags, and push the `.gem` file to [rubygems.org](https://rubygems.org).\r\n\r\n## Contributing\r\n\r\n1. Fork it ( https://github.com/dtan4/terraforming/fork )\r\n2. Create your feature branch (`git checkout -b my-new-feature`)\r\n3. Commit your changes (`git commit -am 'Add some feature'`)\r\n4. Push to the branch (`git push origin my-new-feature`)\r\n5. Create a new Pull Request\r\n\r\n## LICENSE\r\n\r\n[![MIT License](http://img.shields.io/badge/license-MIT-blue.svg?style=flat)](LICENSE)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}