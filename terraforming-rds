#!/usr/bin/env ruby

require "json"

json = ARGF.read
data = JSON.parse(json)

tfstate_db_instances = data['DBInstances'].inject([]) do |result, instance|
  security_groups = {
    "security_group_names.#" => instance['DBSecurityGroups'].length.to_s
  }

  instance['DBSecurityGroups'].each do |security_group|
    security_groups["security_group_names.#{security_group['OptionGroupName']}"] = security_group['OptionGroupName']
  end

  vpc_security_groups = {
    "vpc_security_group_id.#" => instance['VpcSecurityGroups'].length.to_s
  }

  instance['VpcSecurityGroups'].each do |vpc_security_group|
    security_groups["security_group_names.#{vpc_security_group['VpcSecurityGroupId']}"] = vpc_security_group['VpcSecurityGroupId']
  end

  attributes = {
    "address" => instance['Endpoint']['Address'],
    "allocated_storage" => instance['AllocatedStorage'].to_s,
    "availability_zone" => instance['AvailabilityZone'],
    "backup_retention_period" => instance['BackupRetentionPeriod'].to_s,
    "backup_window" => instance['PreferredBackupWindow'],
    "db_subnet_group_name" => instance['DBSubnetGroup'] ? instance['DBSubnetGroup']['DBSubnetGroupName'] : "",
    "endpoint" => instance['Endpoint']['Address'],
    "engine" => instance['Engine'],
    "engine_version" => instance['EngineVersion'],
    "final_snapshot_identifier" => "#{instance['DBInstanceIdentifier']}-final",
    "id" => instance['DBInstanceIdentifier'],
    "identifier" => instance['DBInstanceIdentifier'],
    "instance_class" => instance['DBInstanceClass'],
    "maintenance_window" => instance['PreferredMaintenanceWindow'],
    "multi_az" => instance['MultiAZ'].to_s,
    "name" => instance['DBName'],
    "parameter_group_name" => instance['DBParameterGroups'][0]['DBParameterGroupName'],
    "password" => "xxxxxxxx",
    "port" => instance['Endpoint']['Port'].to_s,
    "publicly_accessible" => instance['PubliclyAccessible'].to_s,
    "status" => instance['DBInstanceStatus'],
    "storage_type" => instance['StorageType'],
    "username" => "xxxxxxxx",
  }.merge(security_groups).merge(vpc_security_groups)

  tfstate_db_instance = {
    "aws_db_instance.#{instance['DBInstanceIdentifier']}" => {
      "type" => "aws_db_instance",
      "primary" => {
        "id" => instance['DBInstanceIdentifier'],
        "attributes" => attributes
      }
    }
  }

  result << tfstate_db_instance
  result
end

puts JSON.pretty_generate(tfstate_db_instances)
